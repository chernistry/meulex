[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "meulex"
version = "0.1.0"
description = "Slack-native, compliance-aware agentic RAG copilot"
authors = [{name = "Meulex Team", email = "team@meulex.ai"}]
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Web framework
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    
    # HTTP client
    "httpx>=0.25.2",
    
    # Data validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # CLI
    "typer>=0.9.0",
    
    # Resilience
    "tenacity>=8.2.3",
    
    # Vector store
    "qdrant-client>=1.7.0",
    
    # Data processing
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    
    # Observability
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-httpx>=0.42b0",
    "opentelemetry-exporter-prometheus>=0.57b0",
    
    # Caching
    "redis>=5.0.1",
    
    # Logging
    "python-json-logger>=2.0.7",
    
    # Orchestration
    "langgraph>=0.0.40",
    "prefect>=2.14.0",
    
    # Text processing
    "tiktoken>=0.5.2",
    
    # Security
    "cryptography>=41.0.0",
    
    # Configuration
    "pyyaml>=6.0.1",
]

[project.optional-dependencies]
dev = [
    # Linting and formatting
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    
    # Testing
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "responses>=0.24.1",
    "freezegun>=1.2.2",
    "httpx>=0.25.2",
    
    # Type stubs
    "types-redis>=4.6.0.11",
    "types-PyYAML>=6.0.12.12",
    
    # Pre-commit
    "pre-commit>=3.5.0",
]

eval = [
    # Evaluation
    "ragas>=0.1.0",
    "datasets>=2.14.0",
]

[project.scripts]
meulex = "meulex.cli.main:app"

[tool.setuptools.packages.find]
where = ["."]
include = ["meulex*"]

[tool.ruff]
line-length = 88
target-version = "py312"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "S101", # assert used
    "S104", # hardcoded bind all interfaces
    "S108", # probable insecure usage of temp file/directory
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["S101", "S106", "S107"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "qdrant_client.*",
    "langgraph.*",
    "prefect.*",
    "ragas.*",
    "datasets.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=meulex",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=85",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["meulex"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
